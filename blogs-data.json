{
  "blogs": [
    {
      "id": 1,
      "title": "Mastering the MERN Stack: A Comprehensive Guide for Beginners in 2025",
      "excerpt": "Dive deep into the world of full-stack development with MongoDB, Express.js, React, and Node.js. This ultimate 2025 guide helps you build modern, scalable web applications from scratch — with hands-on code examples, deployment strategies, and industry best practices.",
      "category": "mern",
      "image": "https://images.unsplash.com/photo-1633356122544-f134324a6cee?w=500",
      "date": "Jan 15, 2025",
      "readTime": "60 min read",
      "content": "# 🚀 Mastering the MERN Stack: A Comprehensive Guide for Beginners in 2025\n\nThe **MERN stack** (MongoDB, Express.js, React, Node.js) remains one of the most powerful ecosystems for modern web development. With advancements like **React 19**, **Node.js 22**, and **enhanced MongoDB Atlas integrations**, 2025 is the perfect time to dive deep into MERN development.\n\nThis complete guide walks you through building a professional full-stack application — from setup and architecture to deployment and optimization.\n\n---\n\n## 🧠 Why Learn MERN in 2025?\n\nThe MERN stack dominates because it offers **a unified JavaScript environment** across frontend, backend, and database layers.\n\n### Key Advantages:\n- **Single Language Efficiency** – JavaScript across all layers means faster development and easier debugging.\n- **Scalability** – Node.js and MongoDB handle large-scale, data-driven applications effortlessly.\n- **Performance** – Asynchronous, event-driven architecture ensures fast and responsive systems.\n- **Vibrant Ecosystem** – Thousands of open-source libraries and active community support.\n\n---\n\n## ⚙️ Prerequisites\nBefore we start, make sure you have:\n\n- ✅ Basic understanding of **JavaScript (ES6+)**\n- ✅ **Node.js (v22 or later)** and **npm** installed\n- ✅ A **MongoDB Atlas** account (free tier works fine)\n- ✅ **VS Code** or your preferred code editor\n- ✅ Familiarity with basic Git commands\n\n---\n\n## 🏗️ Step 1: Project Setup\n\n### 1. Create a new folder\n```bash\nmkdir my-mern-app\ncd my-mern-app\n```\n\n### 2. Initialize the project\n```bash\nnpm init -y\n```\n\n### 3. Install dependencies\n```bash\nnpm install express mongoose cors dotenv\nnpm install -D nodemon\n```\n\n## 🗄️ Step 2: Backend Setup with Express & MongoDB\n\nCreate `server.js`:\n\n```javascript\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nrequire('dotenv').config();\n\nconst app = express();\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// MongoDB Connection\nmongoose.connect(process.env.MONGODB_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n})\n.then(() => console.log('MongoDB connected successfully'))\n.catch(err => console.log('MongoDB connection error:', err));\n\n// Basic route\napp.get('/', (req, res) => {\n  res.json({ message: 'MERN Stack API is running!' });\n});\n\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n```\n\n## ⚛️ Step 3: Frontend with React\n\nCreate a new React app:\n```bash\nnpx create-react-app client\ncd client\nnpm start\n```\n\n## 🔐 Step 4: Authentication System\n\nImplement JWT-based authentication:\n\n```javascript\n// authController.js\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\n\nconst generateToken = (userId) => {\n  return jwt.sign({ userId }, process.env.JWT_SECRET, {\n    expiresIn: '30d',\n  });\n};\n\nconst register = async (req, res) => {\n  try {\n    const { name, email, password } = req.body;\n    \n    // Check if user exists\n    const userExists = await User.findOne({ email });\n    if (userExists) {\n      return res.status(400).json({ message: 'User already exists' });\n    }\n    \n    // Create user\n    const user = await User.create({\n      name,\n      email,\n      password: await bcrypt.hash(password, 12),\n    });\n    \n    res.status(201).json({\n      _id: user._id,\n      name: user.name,\n      email: user.email,\n      token: generateToken(user._id),\n    });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n```\n\n## 🚀 Step 5: Deployment\n\n### Deploy to Heroku:\n1. Create `Procfile`\n2. Set environment variables\n3. Deploy using Git\n\n```bash\ngit add .\ngit commit -m \"Deploy MERN app\"\ngit push heroku main\n```\n\n## 📈 Best Practices for 2025\n\n### Performance Optimization:\n- Use React.memo() for component optimization\n- Implement code splitting with React.lazy()\n- Use MongoDB indexing for faster queries\n- Enable Gzip compression\n\n### Security Measures:\n- Input validation with Joi\n- Rate limiting\n- Helmet.js for security headers\n- Regular dependency updates\n\n## 🎯 Conclusion\n\nCongratulations! You've built a complete MERN stack application. Remember:\n\n- Practice regularly with real projects\n- Stay updated with the latest features\n- Contribute to open source\n- Build a strong portfolio\n\n**Next Steps:**\n- Add real-time features with Socket.io\n- Implement payment integration\n- Add PWA capabilities\n- Explore microservices architecture\n\nHappy coding! 🎉"
    },
    {
      "id": 2,
      "title": "10 Advanced React Hooks You Should Master in 2025",
      "excerpt": "Elevate your React skills with these advanced hooks. From custom authentication to performance optimization, learn practical implementations with code snippets and real-world use cases.",
      "category": "react",
      "image": "https://images.unsplash.com/photo-1633356122102-3fe601e05bd2?w=500",
      "date": "Jan 10, 2025",
      "readTime": "30 min read",
      "content": "# ⚛️ Advanced React Hooks Mastery: Must-Know Techniques for 2025\n\nReact hooks have transformed how we build components. With React 19's new features in 2025, mastering advanced hooks is essential for building efficient, scalable applications. This guide explores 10 powerful hooks with detailed examples.\n\n## 1. useImperativeHandle: Custom Ref Control\n\nExpose specific methods to parent components:\n\n```jsx\nimport React, { useRef, useImperativeHandle, forwardRef } from 'react';\n\nconst FancyInput = forwardRef((props, ref) => {\n  const inputRef = useRef();\n  \n  useImperativeHandle(ref, () => ({\n    focus: () => inputRef.current.focus(),\n    clear: () => inputRef.current.value = '',\n    getValue: () => inputRef.current.value\n  }));\n  \n  return <input ref={inputRef} {...props} />;\n});\n\n// Usage\nconst Parent = () => {\n  const inputRef = useRef();\n  \n  const handleClick = () => {\n    inputRef.current.focus();\n    console.log('Current value:', inputRef.current.getValue());\n  };\n  \n  return (\n    <div>\n      <FancyInput ref={inputRef} />\n      <button onClick={handleClick}>Focus Input</button>\n    </div>\n  );\n};\n```\n\n**Use Case**: Control input behavior in complex forms.\n\n## 2. useDeferredValue: Optimize Concurrent Rendering\n\n```jsx\nimport { useState, useDeferredValue, useMemo } from 'react';\n\nfunction SearchResults({ query }) {\n  const deferredQuery = useDeferredValue(query);\n  \n  const results = useMemo(() => {\n    return heavySearch(deferredQuery);\n  }, [deferredQuery]);\n  \n  return (\n    <div>\n      {results.map(result => (\n        <div key={result.id}>{result.name}</div>\n      ))}\n    </div>\n  );\n}\n```\n\n**Use Case**: Smooth out heavy computations during typing.\n\n## 3. useTransition: Seamless UI Updates\n\n```jsx\nimport { useState, useTransition } from 'react';\n\nfunction TabSwitcher() {\n  const [isPending, startTransition] = useTransition();\n  const [tab, setTab] = useState('home');\n\n  const switchTab = (nextTab) => {\n    startTransition(() => {\n      setTab(nextTab);\n    });\n  };\n\n  return (\n    <div>\n      <nav>\n        <button onClick={() => switchTab('home')}>Home</button>\n        <button onClick={() => switchTab('about')}>About</button>\n        <button onClick={() => switchTab('contact')}>Contact</button>\n      </nav>\n      <div>\n        {isPending ? 'Loading...' : \n          tab === 'home' ? <Home /> :\n          tab === 'about' ? <About /> :\n          <Contact />\n        }\n      </div>\n    </div>\n  );\n}\n```\n\n**Use Case**: Prevent UI freezes during state updates.\n\n## 4. Custom Hook: useAuth\n\n```jsx\nimport { useState, useEffect, createContext, useContext } from 'react';\n\nconst AuthContext = createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          const res = await fetch('/api/auth/me', {\n            headers: { Authorization: `Bearer ${token}` }\n          });\n          if (res.ok) {\n            setUser(await res.json());\n          }\n        } catch (error) {\n          console.error('Auth error:', error);\n        }\n      }\n      setLoading(false);\n    };\n    fetchUser();\n  }, []);\n\n  const login = async (email, password) => {\n    const res = await fetch('/api/auth/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password })\n    });\n    \n    if (res.ok) {\n      const data = await res.json();\n      localStorage.setItem('token', data.token);\n      setUser(data.user);\n      return data;\n    }\n    throw new Error('Login failed');\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n  };\n\n  const value = {\n    user,\n    loading,\n    login,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n```\n\n**Use Case**: Manage user authentication across components.\n\n## 5. useId: Generate Unique IDs\n\n```jsx\nimport { useId } from 'react';\n\nfunction Form() {\n  const emailId = useId();\n  const passwordId = useId();\n\n  return (\n    <form>\n      <label htmlFor={emailId}>Email:</label>\n      <input id={emailId} type=\"email\" />\n      \n      <label htmlFor={passwordId}>Password:</label>\n      <input id={passwordId} type=\"password\" />\n    </form>\n  );\n}\n```\n\n**Use Case**: Accessibility and form labeling.\n\n## 6. Custom Hook: useLocalStorage\n\n```jsx\nimport { useState, useEffect } from 'react';\n\nfunction useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value) => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\n// Usage\nfunction App() {\n  const [name, setName] = useLocalStorage('name', '');\n  \n  return (\n    <input\n      value={name}\n      onChange={(e) => setName(e.target.value)}\n      placeholder=\"Enter your name\"\n    />\n  );\n}\n```\n\n## 7. useReducer with Context for State Management\n\n```jsx\nimport React, { useReducer, createContext, useContext } from 'react';\n\nconst AppStateContext = createContext();\n\nconst appReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return { ...state, user: action.payload };\n    case 'SET_LOADING':\n      return { ...state, loading: action.payload };\n    case 'ADD_TODO':\n      return { ...state, todos: [...state.todos, action.payload] };\n    default:\n      return state;\n  }\n};\n\nexport function AppProvider({ children }) {\n  const [state, dispatch] = useReducer(appReducer, {\n    user: null,\n    loading: false,\n    todos: []\n  });\n\n  return (\n    <AppStateContext.Provider value={{ state, dispatch }}>\n      {children}\n    </AppStateContext.Provider>\n  );\n}\n\nexport function useAppState() {\n  const context = useContext(AppStateContext);\n  if (!context) {\n    throw new Error('useAppState must be used within AppProvider');\n  }\n  return context;\n}\n```\n\n## 8. useDebugValue: Debug Custom Hooks\n\n```jsx\nimport { useState, useEffect, useDebugValue } from 'react';\n\nfunction useOnlineStatus() {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n\n  useDebugValue(isOnline ? 'Online' : 'Offline');\n\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  return isOnline;\n}\n```\n\n## 9. Custom Hook: useFetch\n\n```jsx\nimport { useState, useEffect } from 'react';\n\nfunction useFetch(url) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const result = await response.json();\n        setData(result);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [url]);\n\n  return { data, loading, error };\n}\n\n// Usage\nfunction UserProfile({ userId }) {\n  const { data: user, loading, error } = useFetch(`/api/users/${userId}`);\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error}</div>;\n  \n  return (\n    <div>\n      <h1>{user.name}</h1>\n      <p>{user.email}</p>\n    </div>\n  );\n}\n```\n\n## 10. useSyncExternalStore: External Store Integration\n\n```jsx\nimport { useSyncExternalStore } from 'react';\n\n// External store\nlet listeners = [];\nlet state = { count: 0 };\n\nconst store = {\n  getState: () => state,\n  subscribe: (listener) => {\n    listeners = [...listeners, listener];\n    return () => {\n      listeners = listeners.filter(l => l !== listener);\n    };\n  },\n  increment: () => {\n    state = { ...state, count: state.count + 1 };\n    listeners.forEach(listener => listener());\n  }\n};\n\n// Hook usage\nfunction Counter() {\n  const { count } = useSyncExternalStore(\n    store.subscribe,\n    store.getState\n  );\n\n  return (\n    <div>\n      Count: {count}\n      <button onClick={store.increment}>+</button>\n    </div>\n  );\n}\n```\n\n## 🎯 Performance Tips for 2025\n\n1. **Memoize with useMemo and useCallback**\n2. **Avoid overusing hooks in loops**\n3. **Use React DevTools Profiler**\n4. **Implement code splitting**\n5. **Optimize bundle size**\n\n## 🚀 Project Idea\n\nBuild a dashboard with real-time data using these hooks:\n- Use `useAuth` for authentication\n- Implement `useFetch` for data fetching\n- Add `useLocalStorage` for persistence\n- Use `useTransition` for smooth navigation\n\nShare your creations and learn by doing! Remember, the best way to master hooks is through practice and building real projects."
    },
    {
      "id": 3,
      "title": "JavaScript ES2025 Features: Game-Changing Updates for Developers",
      "excerpt": "Discover the revolutionary ECMAScript 2025 features. From iterator helpers to new Set methods and advanced RegExp capabilities, learn how to leverage these additions with practical code examples.",
      "category": "javascript",
      "image": "https://images.unsplash.com/photo-1627398242454-45a1465c2479?w=500",
      "date": "Jan 5, 2025",
      "readTime": "25 min read",
      "content": "# 🌟 ECMAScript 2025: Next-Level JavaScript Features\n\nES2025 introduces transformative features to JavaScript, making code more expressive and efficient. This guide dives into each feature with code snippets and use cases.\n\n## 1. Iterator Helpers\n\nChainable iterator methods for cleaner code:\n\n```javascript\nconst numbers = [1, 2, 3, 4, 5];\n\n// Traditional approach\nconst doubledOdds = numbers\n  .filter(x => x % 2 === 1)\n  .map(x => x * 2);\n\n// With Iterator Helpers\nconst iterator = numbers.values()\n  .filter(x => x % 2 === 1)\n  .map(x => x * 2);\n\nfor (const num of iterator) {\n  console.log(num); // 2, 6, 10\n}\n\n// Convert back to array\nconst result = Array.from(iterator);\n```\n\n**Supported Methods**: `map`, `filter`, `take`, `drop`, `flatMap`, `reduce`.\n\n## 2. New Set Methods\n\nPerform set operations efficiently:\n\n```javascript\nconst frontend = new Set(['react', 'vue', 'angular']);\nconst backend = new Set(['node', 'python', 'java']);\nconst fullstack = new Set(['react', 'node']);\n\n// Union: All unique elements\nconst allSkills = frontend.union(backend);\n// Set {'react', 'vue', 'angular', 'node', 'python', 'java'}\n\n// Intersection: Common elements\nconst common = frontend.intersection(fullstack);\n// Set {'react'}\n\n// Difference: Elements in first set but not in second\nconst frontendOnly = frontend.difference(fullstack);\n// Set {'vue', 'angular'}\n\n// Symmetric Difference: Elements in either set but not both\nconst uniqueToEach = frontend.symmetricDifference(backend);\n\n// Subset check\nconst isSubset = fullstack.isSubsetOf(frontend); // false\nconst isSuperset = frontend.isSupersetOf(fullstack); // true\n\n// Practical example: Skill matching\nconst requiredSkills = new Set(['javascript', 'react', 'node']);\nconst candidateSkills = new Set(['javascript', 'react', 'vue', 'css']);\n\nconst matchingSkills = candidateSkills.intersection(requiredSkills);\nconst missingSkills = requiredSkills.difference(candidateSkills);\n\nconsole.log(`Matching: ${matchingSkills.size}/${requiredSkills.size}`);\nconsole.log('Missing:', Array.from(missingSkills));\n```\n\n## 3. Array.prototype.findLast and findLastIndex\n\nFind elements from the end:\n\n```javascript\nconst transactions = [\n  { id: 1, amount: 100, type: 'debit' },\n  { id: 2, amount: 200, type: 'credit' },\n  { id: 3, amount: 50, type: 'debit' },\n  { id: 4, amount: 300, type: 'debit' }\n];\n\n// Find last debit transaction\nconst lastDebit = transactions.findLast(t => t.type === 'debit');\n// { id: 4, amount: 300, type: 'debit' }\n\n// Find index of last debit\nconst lastDebitIndex = transactions.findLastIndex(t => t.type === 'debit');\n// 3\n\n// Practical use case: Log analysis\nconst logs = [\n  'ERROR: Database connection failed',\n  'INFO: Server started',\n  'WARN: High memory usage',\n  'ERROR: API timeout'\n];\n\nconst lastError = logs.findLast(log => log.startsWith('ERROR'));\nconst lastErrorIndex = logs.findLastIndex(log => log.startsWith('ERROR'));\n```\n\n## 4. Import Attributes and JSON Modules\n\nImport JSON directly with type safety:\n\n```javascript\n// Before\nimport fs from 'fs';\nconst config = JSON.parse(fs.readFileSync('./config.json', 'utf8'));\n\n// After ES2025\nimport config from './config.json' with { type: 'json' };\nimport data from './data.json' with { type: 'json' };\n\n// config is now a parsed JavaScript object\nconsole.log(config.database.url);\n\n// Example config.json\n{\n  \"database\": {\n    \"url\": \"mongodb://localhost:27017/mydb\",\n    \"options\": { \"useNewUrlParser\": true }\n  },\n  \"server\": {\n    \"port\": 3000,\n    \"host\": \"localhost\"\n  }\n}\n```\n\n## 5. RegExp /v Flag and escape()\n\nUnicode-aware regex and string escaping:\n\n```javascript\n// Unicode property escapes with /v flag\nconst emojiRegex = /\\\\p{Emoji}/v;\nconsole.log(emojiRegex.test('Hello 👋 World')); // true\n\n// Set notation in regex\nconst vowelRegex = /[[a-z]--[aeiou]]/v; // Consonants only\nconsole.log(vowelRegex.test('b')); // true\nconsole.log(vowelRegex.test('a')); // false\n\n// Intersection\nconst commonLetters = /[[a-z]&&[aeiou]]/v; // Vowels only\n\n// String escaping for regex\nconst userInput = '.*+?^${}()|[]\\\\\\\\';\nconst escaped = RegExp.escape(userInput);\nconst regex = new RegExp(escaped);\n\n// Practical example: Email validation\nconst emailRegex = /^\\\\p{L}[\\\\p{L}0-9._%+-]*@\\\\p{L}[\\\\p{L}0-9.-]+\\\\.[\\\\p{L}]{2,}$/v;\n\n// Password validation\nconst passwordRegex = /^(?=.*\\\\p{Ll})(?=.*\\\\p{Lu})(?=.*\\\\d)(?=.*[\\\\p{P}\\\\p{S}]).{8,}$/v;\n```\n\n## 6. Float16Array and Math.f16round\n\nFor high-precision math and graphics:\n\n```javascript\n// Create Float16 arrays\nconst f16 = new Float16Array([1.23456, 2.34567, 3.45678]);\n\n// Round to Float16 precision\nconst preciseValue = Math.f16round(1.23456789);\n\n// Practical use case: Graphics and ML\nconst vertices = new Float16Array([\n  -1.0, -1.0, 0.0,  // x, y, z\n   1.0, -1.0, 0.0,\n   0.0,  1.0, 0.0\n]);\n\n// Neural network weights\nconst weights = new Float16Array(1000);\nfor (let i = 0; i < weights.length; i++) {\n  weights[i] = Math.f16round(Math.random() * 2 - 1);\n}\n```\n\n## 7. Array.prototype.group and groupToMap\n\nGroup array elements by key:\n\n```javascript\nconst employees = [\n  { name: 'Alice', department: 'Engineering', salary: 80000 },\n  { name: 'Bob', department: 'Marketing', salary: 60000 },\n  { name: 'Charlie', department: 'Engineering', salary: 90000 },\n  { name: 'Diana', department: 'Marketing', salary: 70000 }\n];\n\n// Group by department\nconst byDepartment = employees.group(emp => emp.department);\n\nconsole.log(byDepartment);\n// {\n//   Engineering: [\n//     { name: 'Alice', department: 'Engineering', salary: 80000 },\n//     { name: 'Charlie', department: 'Engineering', salary: 90000 }\n//   ],\n//   Marketing: [\n//     { name: 'Bob', department: 'Marketing', salary: 60000 },\n//     { name: 'Diana', department: 'Marketing', salary: 70000 }\n//   ]\n// }\n\n// Calculate average salary by department\nconst avgSalaryByDept = Object.entries(byDepartment).map(([dept, emps]) => ({\n  department: dept,\n  averageSalary: emps.reduce((sum, emp) => sum + emp.salary, 0) / emps.length\n}));\n\n// Group to Map for complex keys\nconst byDeptAndSeniority = employees.groupToMap(emp => [\n  emp.department,\n  emp.salary > 75000 ? 'senior' : 'junior'\n]);\n```\n\n## 8. Error Cause\n\nBetter error chaining and debugging:\n\n```javascript\nasync function fetchUserData(userId) {\n  try {\n    const response = await fetch(`/api/users/${userId}`);\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch user', {\n        cause: {\n          status: response.status,\n          statusText: response.statusText,\n          userId\n        }\n      });\n    }\n    \n    return await response.json();\n  } catch (error) {\n    throw new Error('User data unavailable', {\n      cause: error\n    });\n  }\n}\n\n// Usage\nfetchUserData(123)\n  .catch(error => {\n    console.error('Main error:', error.message);\n    console.error('Caused by:', error.cause);\n    \n    if (error.cause?.status === 404) {\n      // Handle not found\n    }\n  });\n```\n\n## 9. Top-level await\n\nUse await at module top level:\n\n```javascript\n// config.js\nconst config = await fetch('/api/config').then(r => r.json());\nexport default config;\n\n// utils.js\nconst { default: config } = await import('./config.js');\n\nexport function getApiUrl(endpoint) {\n  return `${config.apiBaseUrl}${endpoint}`;\n}\n\n// main.js\nimport { getApiUrl } from './utils.js';\n\nconst users = await fetch(getApiUrl('/users')).then(r => r.json());\nconsole.log(users);\n```\n\n## 10. Private Methods and Fields\n\nEnhanced class privacy:\n\n```javascript\nclass User {\n  #password; // Private field\n  #attempts = 0; // Private field with initial value\n\n  constructor(username, password) {\n    this.username = username;\n    this.#password = this.#hashPassword(password);\n  }\n\n  // Private method\n  #hashPassword(password) {\n    return crypto.subtle.digest('SHA-256', \n      new TextEncoder().encode(password)\n    );\n  }\n\n  // Private static method\n  static #validateUsername(username) {\n    return username.length >= 3;\n  }\n\n  // Public method that uses private fields/methods\n  async login(password) {\n    if (this.#attempts >= 3) {\n      throw new Error('Too many login attempts');\n    }\n\n    const hashed = await this.#hashPassword(password);\n    if (hashed === this.#password) {\n      this.#attempts = 0;\n      return true;\n    }\n\n    this.#attempts++;\n    return false;\n  }\n\n  static create(username, password) {\n    if (!this.#validateUsername(username)) {\n      throw new Error('Invalid username');\n    }\n    return new User(username, password);\n  }\n}\n\n// Usage\nconst user = User.create('john_doe', 'securepassword');\n```\n\n## 🚀 Browser Support and Polyfills\n\n### Check Compatibility:\n```javascript\n// Feature detection\nconst supportsIteratorHelpers = 'map' in Iterator.prototype;\nconst supportsSetMethods = 'union' in Set.prototype;\nconst supportsFindLast = 'findLast' in Array.prototype;\n\nconsole.log('Iterator Helpers:', supportsIteratorHelpers);\nconsole.log('Set Methods:', supportsSetMethods);\nconsole.log('findLast:', supportsFindLast);\n```\n\n### Polyfill Strategy:\n- Use `@babel/preset-env` for transpilation\n- Include core-js polyfills for production\n- Check caniuse.com for specific feature support\n- Use feature detection for progressive enhancement\n\n## 🎯 Project Idea\n\nBuild a data processing tool using ES2025 features:\n- Use **Iterator Helpers** for data transformation\n- Implement **Set Methods** for data deduplication\n- Apply **Array.group** for data aggregation\n- Use **Error Cause** for better error handling\n\nExperiment with these new features in your next project to stay ahead of the curve!"
    },
    {
      "id": 4,
      "title": "Building Scalable REST APIs with Node.js and Express",
      "excerpt": "Create robust, production-ready REST APIs with Node.js and Express. This guide covers architecture, authentication, testing, and deployment with advanced optimization techniques.",
      "category": "node",
      "image": "https://images.unsplash.com/photo-1618477247222-acbdb0e159b3?w=500",
      "date": "Dec 28, 2024",
      "readTime": "35 min read",
      "content": "# 🔒 Building Scalable REST APIs with Node.js and Express\n\nNode.js and Express power millions of APIs in 2025. Learn to create secure, scalable APIs with this in-depth guide covering everything from basic setup to advanced production optimizations.\n\n## 🏗️ API Design Principles\n\n### RESTful Best Practices:\n- **Resource-Based URLs**: `/api/v1/users`, `/api/v1/posts`\n- **Proper HTTP Methods**: GET, POST, PUT, PATCH, DELETE\n- **Standard Status Codes**: 200, 201, 400, 401, 404, 500\n- **Versioning**: Always version your API (`/api/v1/`)\n- **Consistent Response Format**\n\n### Response Standard:\n```javascript\n{\n  \"success\": true,\n  \"data\": { /* resource data */ },\n  \"message\": \"Operation successful\",\n  \"timestamp\": \"2024-12-28T10:30:00.000Z\"\n}\n```\n\n## ⚡ Core Setup & Configuration\n\n### 1. Project Structure\n```\napi/\n├── src/\n│   ├── controllers/\n│   ├── models/\n│   ├── routes/\n│   ├── middleware/\n│   ├── config/\n│   ├── utils/\n│   └── validations/\n├── tests/\n├── docs/\n├── package.json\n└── README.md\n```\n\n### 2. Package.json Setup\n```json\n{\n  \"name\": \"express-api\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"start\": \"node src/server.js\",\n    \"dev\": \"nodemon src/server.js\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.18.0\",\n    \"mongoose\": \"^7.5.0\",\n    \"cors\": \"^2.8.5\",\n    \"helmet\": \"^7.0.0\",\n    \"express-rate-limit\": \"^6.8.0\",\n    \"compression\": \"^1.7.4\",\n    \"bcryptjs\": \"^2.4.3\",\n    \"jsonwebtoken\": \"^9.0.0\",\n    \"joi\": \"^17.9.0\",\n    \"dotenv\": \"^16.3.0\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^3.0.0\",\n    \"jest\": \"^29.6.0\",\n    \"supertest\": \"^6.3.0\"\n  }\n}\n```\n\n### 3. Server Configuration (server.js)\n```javascript\nimport express from 'express';\nimport mongoose from 'mongoose';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport compression from 'compression';\nimport rateLimit from 'express-rate-limit';\nimport 'dotenv/config';\n\nimport userRoutes from './routes/users.js';\nimport authRoutes from './routes/auth.js';\nimport postRoutes from './routes/posts.js';\n\nconst app = express();\n\n// Security Middleware\napp.use(helmet({\n  crossOriginResourcePolicy: { policy: \"cross-origin\" }\n}));\n\n// CORS Configuration\napp.use(cors({\n  origin: process.env.ALLOWED_ORIGINS?.split(',') || ['http://localhost:3000'],\n  credentials: true\n}));\n\n// Rate Limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: {\n    error: 'Too many requests from this IP, please try again later.'\n  }\n});\napp.use('/api/', limiter);\n\n// Body Parsing\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true }));\n\n// Compression\napp.use(compression());\n\n// MongoDB Connection\nmongoose.connect(process.env.MONGODB_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n})\n.then(() => console.log('✅ MongoDB connected successfully'))\n.catch(err => {\n  console.error('❌ MongoDB connection error:', err);\n  process.exit(1);\n});\n\n// Routes\napp.use('/api/v1/auth', authRoutes);\napp.use('/api/v1/users', userRoutes);\napp.use('/api/v1/posts', postRoutes);\n\n// Health Check\napp.get('/api/v1/health', (req, res) => {\n  res.json({\n    success: true,\n    message: 'API is running smoothly',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime()\n  });\n});\n\n// 404 Handler\napp.use('*', (req, res) => {\n  res.status(404).json({\n    success: false,\n    message: `Route ${req.originalUrl} not found`\n  });\n});\n\n// Global Error Handler\napp.use((err, req, res, next) => {\n  console.error('Error Stack:', err.stack);\n  \n  // Mongoose Validation Error\n  if (err.name === 'ValidationError') {\n    const errors = Object.values(err.errors).map(e => e.message);\n    return res.status(400).json({\n      success: false,\n      message: 'Validation Error',\n      errors\n    });\n  }\n  \n  // JWT Errors\n  if (err.name === 'JsonWebTokenError') {\n    return res.status(401).json({\n      success: false,\n      message: 'Invalid token'\n    });\n  }\n  \n  // Mongoose Duplicate Key Error\n  if (err.code === 11000) {\n    const field = Object.keys(err.keyValue)[0];\n    return res.status(400).json({\n      success: false,\n      message: `${field} already exists`\n    });\n  }\n  \n  // Default Error\n  res.status(err.status || 500).json({\n    success: false,\n    message: process.env.NODE_ENV === 'production' \n      ? 'Internal server error' \n      : err.message,\n    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })\n  });\n});\n\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => {\n  console.log(`🚀 Server running on port ${PORT}`);\n  console.log(`📊 Environment: ${process.env.NODE_ENV}`);\n});\n```\n\n## 🔐 Authentication System\n\n### JWT Middleware (middleware/auth.js)\n```javascript\nimport jwt from 'jsonwebtoken';\nimport User from '../models/User.js';\n\nexport const authenticate = async (req, res, next) => {\n  try {\n    const token = req.header('Authorization')?.replace('Bearer ', '');\n    \n    if (!token) {\n      return res.status(401).json({\n        success: false,\n        message: 'Access denied. No token provided.'\n      });\n    }\n    \n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    const user = await User.findById(decoded.userId).select('-password');\n    \n    if (!user) {\n      return res.status(401).json({\n        success: false,\n        message: 'Invalid token. User not found.'\n      });\n    }\n    \n    req.user = user;\n    next();\n  } catch (error) {\n    res.status(401).json({\n      success: false,\n      message: 'Invalid token.'\n    });\n  }\n};\n\nexport const authorize = (...roles) => {\n  return (req, res, next) => {\n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({\n        success: false,\n        message: 'Access denied. Insufficient permissions.'\n      });\n    }\n    next();\n  };\n};\n```\n\n### Auth Controller (controllers/auth.js)\n```javascript\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport User from '../models/User.js';\nimport { registerValidation, loginValidation } from '../validations/auth.js';\n\nconst generateToken = (userId) => {\n  return jwt.sign({ userId }, process.env.JWT_SECRET, {\n    expiresIn: process.env.JWT_EXPIRES_IN || '7d',\n  });\n};\n\nexport const register = async (req, res) => {\n  try {\n    // Validation\n    const { error } = registerValidation.validate(req.body);\n    if (error) {\n      return res.status(400).json({\n        success: false,\n        message: error.details[0].message\n      });\n    }\n    \n    const { name, email, password } = req.body;\n    \n    // Check if user exists\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      return res.status(400).json({\n        success: false,\n        message: 'User already exists with this email'\n      });\n    }\n    \n    // Hash password\n    const saltRounds = 12;\n    const hashedPassword = await bcrypt.hash(password, saltRounds);\n    \n    // Create user\n    const user = await User.create({\n      name,\n      email,\n      password: hashedPassword,\n    });\n    \n    // Generate token\n    const token = generateToken(user._id);\n    \n    res.status(201).json({\n      success: true,\n      message: 'User registered successfully',\n      data: {\n        user: {\n          id: user._id,\n          name: user.name,\n          email: user.email,\n          role: user.role\n        },\n        token\n      }\n    });\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Internal server error during registration'\n    });\n  }\n};\n\nexport const login = async (req, res) => {\n  try {\n    // Validation\n    const { error } = loginValidation.validate(req.body);\n    if (error) {\n      return res.status(400).json({\n        success: false,\n        message: error.details[0].message\n      });\n    }\n    \n    const { email, password } = req.body;\n    \n    // Find user\n    const user = await User.findOne({ email }).select('+password');\n    if (!user) {\n      return res.status(401).json({\n        success: false,\n        message: 'Invalid email or password'\n      });\n    }\n    \n    // Check password\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n    if (!isPasswordValid) {\n      return res.status(401).json({\n        success: false,\n        message: 'Invalid email or password'\n      });\n    }\n    \n    // Generate token\n    const token = generateToken(user._id);\n    \n    res.json({\n      success: true,\n      message: 'Login successful',\n      data: {\n        user: {\n          id: user._id,\n          name: user.name,\n          email: user.email,\n          role: user.role\n        },\n        token\n      }\n    });\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Internal server error during login'\n    });\n  }\n};\n\nexport const getMe = async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id);\n    \n    res.json({\n      success: true,\n      data: { user }\n    });\n  } catch (error) {\n    console.error('Get user error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Error fetching user data'\n    });\n  }\n};\n```\n\n## 📊 Advanced Features\n\n### 1. Caching with Redis\n```javascript\nimport redis from 'redis';\n\nconst client = redis.createClient({\n  url: process.env.REDIS_URL\n});\n\nclient.on('error', (err) => console.log('Redis Client Error', err));\nawait client.connect();\n\n// Cache middleware\nexport const cache = (duration) => {\n  return async (req, res, next) => {\n    if (req.method !== 'GET') return next();\n    \n    const key = `cache:${req.originalUrl}`;\n    const cached = await client.get(key);\n    \n    if (cached) {\n      return res.json(JSON.parse(cached));\n    }\n    \n    // Store original send method\n    const originalSend = res.json;\n    res.json = function(data) {\n      client.setEx(key, duration, JSON.stringify(data));\n      originalSend.call(this, data);\n    };\n    \n    next();\n  };\n};\n```\n\n### 2. File Upload with Multer\n```javascript\nimport multer from 'multer';\nimport path from 'path';\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));\n  }\n});\n\nconst fileFilter = (req, file, cb) => {\n  const allowedTypes = /jpeg|jpg|png|gif|pdf|doc|docx/;\n  const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n  const mimetype = allowedTypes.test(file.mimetype);\n  \n  if (mimetype && extname) {\n    return cb(null, true);\n  } else {\n    cb(new Error('Only image and document files are allowed'));\n  }\n};\n\nexport const upload = multer({\n  storage,\n  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB\n  fileFilter\n});\n```\n\n## 🧪 Testing with Jest\n\n```javascript\nimport request from 'supertest';\nimport app from '../src/server.js';\nimport User from '../src/models/User.js';\n\ndescribe('Auth API', () => {\n  beforeEach(async () => {\n    await User.deleteMany({});\n  });\n\n  describe('POST /api/v1/auth/register', () => {\n    it('should register a new user', async () => {\n      const userData = {\n        name: 'Test User',\n        email: 'test@example.com',\n        password: 'password123'\n      };\n\n      const res = await request(app)\n        .post('/api/v1/auth/register')\n        .send(userData);\n\n      expect(res.status).toBe(201);\n      expect(res.body.success).toBe(true);\n      expect(res.body.data.user).toHaveProperty('id');\n      expect(res.body.data.user.email).toBe(userData.email);\n    });\n  });\n\n  describe('POST /api/v1/auth/login', () => {\n    it('should login existing user', async () => {\n      // First register a user\n      const userData = {\n        name: 'Test User',\n        email: 'test@example.com',\n        password: 'password123'\n      };\n\n      await request(app)\n        .post('/api/v1/auth/register')\n        .send(userData);\n\n      // Then login\n      const res = await request(app)\n        .post('/api/v1/auth/login')\n        .send({\n          email: userData.email,\n          password: userData.password\n        });\n\n      expect(res.status).toBe(200);\n      expect(res.body.success).toBe(true);\n      expect(res.body.data).toHaveProperty('token');\n    });\n  });\n});\n```\n\n## 🚀 Deployment & Production\n\n### Environment Variables (.env)\n```env\nNODE_ENV=production\nPORT=5000\nMONGODB_URI=mongodb://localhost:27017/your-db\nJWT_SECRET=your-super-secret-jwt-key\nJWT_EXPIRES_IN=7d\nALLOWED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com\nREDIS_URL=redis://localhost:6379\n```\n\n### PM2 Configuration (ecosystem.config.js)\n```javascript\nmodule.exports = {\n  apps: [{\n    name: 'api-server',\n    script: './src/server.js',\n    instances: 'max',\n    exec_mode: 'cluster',\n    env: {\n      NODE_ENV: 'production',\n      PORT: 5000\n    },\n    error_file: './logs/err.log',\n    out_file: './logs/out.log',\n    log_file: './logs/combined.log',\n    time: true\n  }]\n};\n```\n\n### Dockerfile\n```dockerfile\nFROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package*.json ./\nRUN npm ci --only=production\n\nCOPY . .\n\nUSER node\n\nEXPOSE 5000\n\nCMD [\"node\", \"src/server.js\"]\n```\n\n## 📈 Monitoring & Logging\n\n### Winston Logger\n```javascript\nimport winston from 'winston';\n\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  transports: [\n    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'logs/combined.log' }),\n  ],\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  logger.add(new winston.transports.Console({\n    format: winston.format.simple()\n  }));\n}\n\nexport default logger;\n```\n\n## 🎯 Best Practices Summary\n\n1. **Security**: Always validate input, use HTTPS, implement rate limiting\n2. **Performance**: Use caching, compression, and database indexing\n3. **Error Handling**: Comprehensive error handling with proper status codes\n4. **Testing**: Write unit and integration tests\n5. **Documentation**: Use Swagger/OpenAPI for API documentation\n6. **Monitoring**: Implement logging and health checks\n7. **Scalability**: Use clustering and load balancing\n\nYour API is now production-ready! Remember to:\n- Regularly update dependencies\n- Monitor performance metrics\n- Implement proper backup strategies\n- Use API gateways for microservices\n- Follow API versioning best practices\n\nHappy coding! 🚀"
    },
    {
      "id": 5,
      "title": "SEO Best Practices Every Web Developer Should Master in 2025",
      "excerpt": "Transform your websites into search engine magnets with technical SEO, structured data, and performance optimization. Learn the latest trends and practical implementations.",
      "category": "seo",
      "image": "https://images.unsplash.com/photo-1551434678-e076c223a692?w=500",
      "date": "Dec 20, 2024",
      "readTime": "28 min read",
      "content": "# 📈 Ultimate SEO Guide for Web Developers in 2025\n\nSEO is critical for web visibility, and developers play a key role. This comprehensive guide covers technical SEO, performance optimization, and 2025 trends with actionable code snippets.\n\n## 🏗️ Technical SEO Fundamentals\n\n### 1. robots.txt\nControl search engine crawling:\n\n```text\nUser-agent: *\nAllow: /\nDisallow: /admin/\nDisallow: /private/\nDisallow: /api/\n\n# Sitemaps\nSitemap: https://yoursite.com/sitemap.xml\nSitemap: https://yoursite.com/sitemap-posts.xml\n```\n\n### 2. XML Sitemap\nGenerate dynamic sitemaps with Node.js:\n\n```javascript\n// sitemap-generator.js\nimport { SitemapStream, streamToPromise } from 'sitemap';\nimport { createGzip } from 'zlib';\n\nlet sitemap;\n\nexport async function generateSitemap(req, res) {\n  res.header('Content-Type', 'application/xml');\n  res.header('Content-Encoding', 'gzip');\n\n  if (sitemap) {\n    res.send(sitemap);\n    return;\n  }\n\n  try {\n    const smStream = new SitemapStream({\n      hostname: 'https://yoursite.com'\n    });\n    const pipeline = smStream.pipe(createGzip());\n\n    // Add static pages\n    smStream.write({\n      url: '/',\n      changefreq: 'daily',\n      priority: 1.0,\n      lastmod: new Date()\n    });\n    \n    smStream.write({\n      url: '/about',\n      changefreq: 'monthly',\n      priority: 0.8\n    });\n\n    // Add dynamic content (e.g., from database)\n    const posts = await Post.find({ published: true });\n    posts.forEach(post => {\n      smStream.write({\n        url: `/blog/${post.slug}`,\n        changefreq: 'weekly',\n        priority: 0.9,\n        lastmod: post.updatedAt\n      });\n    });\n\n    smStream.end();\n    \n    const sitemapBuffer = await streamToPromise(pipeline);\n    sitemap = sitemapBuffer;\n    \n    res.send(sitemap);\n  } catch (error) {\n    console.error('Sitemap generation error:', error);\n    res.status(500).end();\n  }\n}\n```\n\n### 3. Canonical URLs\nPrevent duplicate content:\n\n```html\n<link rel=\"canonical\" href=\"https://yoursite.com/correct-url\" />\n\n<!-- For pagination -->\n<link rel=\"prev\" href=\"https://yoursite.com/page/1\" />\n<link rel=\"next\" href=\"https://yoursite.com/page/3\" />\n```\n\n## 🎯 Structured Data & Schema.org\n\n### 1. Article Schema\n\n```html\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"Article\",\n  \"headline\": \"Complete SEO Guide for Developers in 2025\",\n  \"description\": \"Learn advanced SEO techniques for web developers...\",\n  \"image\": \"https://yoursite.com/images/seo-guide-2025.jpg\",\n  \"author\": {\n    \"@type\": \"Person\",\n    \"name\": \"Jawad Ahmad\",\n    \"url\": \"https://yoursite.com/author/jawad\"\n  },\n  \"publisher\": {\n    \"@type\": \"Organization\",\n    \"name\": \"Your Site Name\",\n    \"logo\": {\n      \"@type\": \"ImageObject\",\n      \"url\": \"https://yoursite.com/logo.png\"\n    }\n  },\n  \"datePublished\": \"2024-12-20T08:00:00+08:00\",\n  \"dateModified\": \"2024-12-20T09:30:00+08:00\",\n  \"mainEntityOfPage\": {\n    \"@type\": \"WebPage\",\n    \"@id\": \"https://yoursite.com/blog/seo-guide-2025\"\n  },\n  \"articleSection\": \"Web Development\",\n  \"keywords\": [\"SEO\", \"Web Development\", \"JavaScript\", \"React\"]\n}\n</script>\n```\n\n### 2. FAQ Schema\n\n```html\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"FAQPage\",\n  \"mainEntity\": [{\n    \"@type\": \"Question\",\n    \"name\": \"What is technical SEO?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"Technical SEO refers to website and server optimizations...\"\n    }\n  }, {\n    \"@type\": \"Question\",\n    \"name\": \"Why is page speed important for SEO?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"Page speed is a direct ranking factor and affects user experience...\"\n    }\n  }]\n}\n</script>\n```\n\n### 3. Breadcrumb Schema\n\n```html\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"BreadcrumbList\",\n  \"itemListElement\": [{\n    \"@type\": \"ListItem\",\n    \"position\": 1,\n    \"name\": \"Home\",\n    \"item\": \"https://yoursite.com\"\n  }, {\n    \"@type\": \"ListItem\",\n    \"position\": 2,\n    \"name\": \"Blog\",\n    \"item\": \"https://yoursite.com/blog\"\n  }, {\n    \"@type\": \"ListItem\",\n    \"position\": 3,\n    \"name\": \"SEO Guide 2025\",\n    \"item\": \"https://yoursite.com/blog/seo-guide-2025\"\n  }]\n}\n</script>\n```\n\n## ⚡ Performance Optimization\n\n### 1. Image Optimization\n\n#### WebP with Fallbacks\n```html\n<picture>\n  <source \n    srcset=\"image.webp\" \n    type=\"image/webp\">\n  <source \n    srcset=\"image.jpg\" \n    type=\"image/jpeg\">\n  <img \n    src=\"image.jpg\" \n    alt=\"Descriptive alt text\"\n    loading=\"lazy\"\n    width=\"800\"\n    height=\"600\">\n</picture>\n```\n\n#### Lazy Loading\n```html\n<img \n  src=\"placeholder.jpg\"\n  data-src=\"actual-image.jpg\"\n  alt=\"Description\"\n  loading=\"lazy\"\n  class=\"lazyload\">\n\n<script>\n// Intersection Observer for lazy loading\nconst lazyImages = document.querySelectorAll('img.lazyload');\n\nconst imageObserver = new IntersectionObserver((entries, observer) => {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      const img = entry.target;\n      img.src = img.dataset.src;\n      img.classList.remove('lazyload');\n      imageObserver.unobserve(img);\n    }\n  });\n});\n\nlazyImages.forEach(img => imageObserver.observe(img));\n</script>\n```\n\n### 2. Critical CSS Inlining\n\n```html\n<style>\n/* Critical above-the-fold CSS */\n.header { /* styles */ }\n.hero { /* styles */ }\n</style>\n\n<link rel=\"stylesheet\" href=\"non-critical.css\" media=\"print\" onload=\"this.media='all'\">\n```\n\n### 3. JavaScript Optimization\n\n#### Code Splitting with React\n```jsx\nimport { lazy, Suspense } from 'react';\n\nconst HeavyComponent = lazy(() => import('./HeavyComponent'));\n\nfunction App() {\n  return (\n    <div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <HeavyComponent />\n      </Suspense>\n    </div>\n  );\n}\n```\n\n#### Service Worker for Caching\n```javascript\n// sw.js\nconst CACHE_NAME = 'v1.0.0';\nconst urlsToCache = [\n  '/',\n  '/styles/main.css',\n  '/script/main.js'\n];\n\nself.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(cache => cache.addAll(urlsToCache))\n  );\n});\n\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request)\n      .then(response => {\n        if (response) {\n          return response;\n        }\n        return fetch(event.request);\n      }\n    )\n  );\n});\n```\n\n## 📊 Core Web Vitals Optimization\n\n### 1. Largest Contentful Paint (LCP)\n\n**Target: < 2.5 seconds**\n\n```javascript\n// Monitor LCP\nnew PerformanceObserver((entryList) => {\n  const entries = entryList.getEntries();\n  const lastEntry = entries[entries.length - 1];\n  console.log('LCP:', lastEntry.startTime);\n}).observe({ type: 'largest-contentful-paint', buffered: true });\n\n// Optimize LCP elements\nconst lcpElement = document.querySelector('.hero-image');\nif (lcpElement) {\n  // Preload LCP image\n  const link = document.createElement('link');\n  link.rel = 'preload';\n  link.as = 'image';\n  link.href = lcpElement.src;\n  document.head.appendChild(link);\n}\n```\n\n### 2. First Input Delay (FID)\n\n**Target: < 100 milliseconds**\n\n```javascript\n// Defer non-critical JavaScript\n<script src=\"critical.js\" defer></script>\n\n// Break up long tasks\nfunction processInChunks() {\n  const chunkSize = 100;\n  let index = 0;\n  \n  function processChunk() {\n    const chunk = data.slice(index, index + chunkSize);\n    // Process chunk...\n    index += chunkSize;\n    \n    if (index < data.length) {\n      setTimeout(processChunk, 0);\n    }\n  }\n  \n  processChunk();\n}\n```\n\n### 3. Cumulative Layout Shift (CLS)\n\n**Target: < 0.1**\n\n```html\n<!-- Reserve space for images -->\n<img \n  src=\"image.jpg\" \n  alt=\"Description\"\n  width=\"800\" \n  height=\"600\">\n\n<!-- Reserve space for ads -->\n<div class=\"ad-container\" style=\"min-height: 250px;\">\n  <!-- Ad content -->\n</div>\n\n<!-- For dynamic content -->\n<div class=\"skeleton-loader\">\n  <!-- Loading placeholder -->\n</div>\n```\n\n## 🔍 Advanced SEO Techniques\n\n### 1. International SEO (hreflang)\n\n```html\n<link rel=\"alternate\" hreflang=\"en\" href=\"https://yoursite.com/en\" />\n<link rel=\"alternate\" hreflang=\"es\" href=\"https://yoursite.com/es\" />\n<link rel=\"alternate\" hreflang=\"x-default\" href=\"https://yoursite.com\" />\n```\n\n### 2. Pagination SEO\n\n```html\n<!-- rel=\"next\" and rel=\"prev\" -->\n<link rel=\"prev\" href=\"https://yoursite.com/blog?page=1\" />\n<link rel=\"next\" href=\"https://yoursite.com/blog?page=3\" />\n\n<!-- View All pattern -->\n<link rel=\"canonical\" href=\"https://yoursite.com/blog?page=2\" />\n```\n\n### 3. JavaScript SEO\n\n```javascript\n// Dynamic meta tags for SPAs\nfunction updateMetaTags(route) {\n  const meta = getMetaForRoute(route);\n  \n  // Update title\n  document.title = meta.title;\n  \n  // Update meta description\n  let metaDesc = document.querySelector('meta[name=\"description\"]');\n  if (!metaDesc) {\n    metaDesc = document.createElement('meta');\n    metaDesc.name = 'description';\n    document.head.appendChild(metaDesc);\n  }\n  metaDesc.content = meta.description;\n  \n  // Update canonical URL\n  let canonical = document.querySelector('link[rel=\"canonical\"]');\n  if (!canonical) {\n    canonical = document.createElement('link');\n    canonical.rel = 'canonical';\n    document.head.appendChild(canonical);\n  }\n  canonical.href = meta.canonicalUrl;\n  \n  // Update structured data\n  updateStructuredData(meta.structuredData);\n}\n\n// PushState for clean URLs\nwindow.history.pushState({}, meta.title, meta.canonicalUrl);\n```\n\n## 🛠️ SEO Tools & Automation\n\n### 1. Automated SEO Audits\n\n```javascript\n// puppeteer-seo-audit.js\nimport puppeteer from 'puppeteer';\n\nasync function runSEOAudit(url) {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  \n  // Set viewport\n  await page.setViewport({ width: 1920, height: 1080 });\n  \n  // Navigate to page\n  await page.goto(url, { waitUntil: 'networkidle0' });\n  \n  const auditResults = {\n    title: await page.title(),\n    metaDescription: await page.$eval('meta[name=\"description\"]', el => el?.content || ''),\n    headings: await page.$$eval('h1, h2, h3', elements => \n      elements.map(el => ({\n        tag: el.tagName,\n        text: el.textContent.trim()\n      }))\n    ),\n    images: await page.$$eval('img', images => \n      images.map(img => ({\n        src: img.src,\n        alt: img.alt,\n        hasAlt: !!img.alt\n      }))\n    ),\n    links: await page.$$eval('a', links => \n      links.map(link => ({\n        href: link.href,\n        text: link.textContent.trim(),\n        isInternal: link.href.includes(window.location.hostname)\n      }))\n    )\n  };\n  \n  await browser.close();\n  return auditResults;\n}\n```\n\n### 2. Performance Monitoring\n\n```javascript\n// performance-monitor.js\nconst performanceMetrics = {};\n\n// Capture Web Vitals\nfunction captureWebVitals() {\n  const vitals = ['LCP', 'FID', 'CLS'];\n  \n  vitals.forEach(metric => {\n    new PerformanceObserver((entryList) => {\n      const entries = entryList.getEntries();\n      entries.forEach(entry => {\n        performanceMetrics[metric] = entry.value;\n        \n        // Send to analytics\n        if (window.gtag) {\n          gtag('event', 'web_vital', {\n            event_category: 'Web Vitals',\n            event_label: metric,\n            value: Math.round(entry.value),\n            non_interaction: true\n          });\n        }\n      });\n    }).observe({ type: metric, buffered: true });\n  });\n}\n\ndocument.addEventListener('DOMContentLoaded', captureWebVitals);\n```\n\n## 🎯 2025 SEO Trends\n\n### 1. AI-Powered Search\n- Optimize for natural language queries\n- Focus on E-E-A-T (Experience, Expertise, Authoritativeness, Trustworthiness)\n- Implement entity-based optimization\n\n### 2. Voice Search Optimization\n```html\n<!-- Schema for voice search -->\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"QAPage\",\n  \"mainEntity\": {\n    \"@type\": \"Question\",\n    \"name\": \"How to improve website SEO?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"Start with technical SEO, optimize page speed...\"\n    }\n  }\n}\n</script>\n```\n\n### 3. Visual Search\n- Optimize images for visual search\n- Implement product schema for e-commerce\n- Use descriptive file names and alt text\n\n## 📈 SEO Checklist for Developers\n\n### Technical SEO\n- [ ] HTTPS implementation\n- [ ] Mobile responsiveness\n- [ ] Page speed optimization\n- [ ] XML sitemap\n- [ ] robots.txt\n- [ ] Structured data\n- [ ] Canonical URLs\n\n### Content SEO\n- [ ] Keyword research\n- [ ] Meta tags optimization\n- [ ] Heading structure\n- [ ] Internal linking\n- [ ] Image optimization\n- [ ] Content freshness\n\n### Performance\n- [ ] Core Web Vitals optimization\n- [ ] JavaScript optimization\n- [ ] CSS optimization\n- [ ] Caching strategy\n- [ ] CDN implementation\n\n## 🚀 Getting Started\n\n1. **Audit Your Site**: Use Lighthouse and PageSpeed Insights\n2. **Fix Critical Issues**: Address 404s, redirect chains, and technical errors\n3. **Optimize Content**: Implement structured data and meta tags\n4. **Monitor Performance**: Set up continuous monitoring\n5. **Stay Updated**: Follow SEO trends and algorithm updates\n\nRemember: SEO is an ongoing process. Regular audits, content updates, and performance monitoring are essential for long-term success.\n\n**Pro Tip**: Build relationships with other developers and SEO professionals. The best SEO strategies often come from collaboration between technical and marketing teams.\n\nHappy optimizing! 🎉"
    }
  ]
}